// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/smam.h"
#include <RcppGSL.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// vp11
NumericVector vp11(NumericVector vw, double t, double lambda1, double lambda0);
static SEXP _smam_vp11_try(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vw(vwSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    rcpp_result_gen = Rcpp::wrap(vp11(vw, t, lambda1, lambda0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_vp11(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_vp11_try(vwSEXP, tSEXP, lambda1SEXP, lambda0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vp10
NumericVector vp10(NumericVector vw, double t, double lambda1, double lambda0);
static SEXP _smam_vp10_try(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vw(vwSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    rcpp_result_gen = Rcpp::wrap(vp10(vw, t, lambda1, lambda0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_vp10(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_vp10_try(vwSEXP, tSEXP, lambda1SEXP, lambda0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vp00
NumericVector vp00(NumericVector vw, double t, double lambda1, double lambda0);
static SEXP _smam_vp00_try(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vw(vwSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    rcpp_result_gen = Rcpp::wrap(vp00(vw, t, lambda1, lambda0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_vp00(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_vp00_try(vwSEXP, tSEXP, lambda1SEXP, lambda0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// vp01
NumericVector vp01(NumericVector vw, double t, double lambda1, double lambda0);
static SEXP _smam_vp01_try(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vw(vwSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    rcpp_result_gen = Rcpp::wrap(vp01(vw, t, lambda1, lambda0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_vp01(SEXP vwSEXP, SEXP tSEXP, SEXP lambda1SEXP, SEXP lambda0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_vp01_try(vwSEXP, tSEXP, lambda1SEXP, lambda0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// h11
NumericVector h11(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_h11_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(h11(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_h11(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_h11_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// h10
NumericVector h10(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_h10_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(h10(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_h10(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_h10_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// h00
NumericVector h00(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_h00_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(h00(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_h00(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_h00_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// h01
NumericVector h01(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_h01_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(h01(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_h01(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_h01_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ncllk_m1_inc
double ncllk_m1_inc(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl, LogicalVector& logtr);
static SEXP _smam_ncllk_m1_inc_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP logtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< LogicalVector& >::type logtr(logtrSEXP);
    rcpp_result_gen = Rcpp::wrap(ncllk_m1_inc(theta, data, integrControl, logtr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ncllk_m1_inc(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP logtrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ncllk_m1_inc_try(thetaSEXP, dataSEXP, integrControlSEXP, logtrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// nllk_inc
double nllk_inc(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl, LogicalVector& logtr);
static SEXP _smam_nllk_inc_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP logtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< LogicalVector& >::type logtr(logtrSEXP);
    rcpp_result_gen = Rcpp::wrap(nllk_inc(theta, data, integrControl, logtr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_nllk_inc(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP logtrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_nllk_inc_try(thetaSEXP, dataSEXP, integrControlSEXP, logtrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fwd_bwd_mr
NumericMatrix fwd_bwd_mr(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl);
static SEXP _smam_fwd_bwd_mr_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(fwd_bwd_mr(theta, data, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_fwd_bwd_mr(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_fwd_bwd_mr_try(thetaSEXP, dataSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// viterbi_mr
NumericMatrix viterbi_mr(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl);
static SEXP _smam_viterbi_mr_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_mr(theta, data, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_viterbi_mr(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_viterbi_mr_try(thetaSEXP, dataSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// partial_viterbi_mr
NumericMatrix partial_viterbi_mr(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl, int& startpoint, int& pathlength);
static SEXP _smam_partial_viterbi_mr_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP startpointSEXP, SEXP pathlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int& >::type startpoint(startpointSEXP);
    Rcpp::traits::input_parameter< int& >::type pathlength(pathlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_viterbi_mr(theta, data, integrControl, startpoint, pathlength));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_partial_viterbi_mr(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP startpointSEXP, SEXP pathlengthSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_partial_viterbi_mr_try(thetaSEXP, dataSEXP, integrControlSEXP, startpointSEXP, pathlengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fwd_bwd_ths
NumericMatrix fwd_bwd_ths(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl);
static SEXP _smam_fwd_bwd_ths_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(fwd_bwd_ths(theta, data, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_fwd_bwd_ths(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_fwd_bwd_ths_try(thetaSEXP, dataSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// viterbi_ths
NumericMatrix viterbi_ths(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl);
static SEXP _smam_viterbi_ths_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi_ths(theta, data, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_viterbi_ths(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_viterbi_ths_try(thetaSEXP, dataSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// partial_viterbi_ths
NumericMatrix partial_viterbi_ths(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl, int& startpoint, int& pathlength);
static SEXP _smam_partial_viterbi_ths_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP startpointSEXP, SEXP pathlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int& >::type startpoint(startpointSEXP);
    Rcpp::traits::input_parameter< int& >::type pathlength(pathlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(partial_viterbi_ths(theta, data, integrControl, startpoint, pathlength));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_partial_viterbi_ths(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP startpointSEXP, SEXP pathlengthSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_partial_viterbi_ths_try(thetaSEXP, dataSEXP, integrControlSEXP, startpointSEXP, pathlengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp00
NumericVector ths_vp00(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp00_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp00(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp00(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp00_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp01
NumericVector ths_vp01(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp01_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp01(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp01(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp01_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp02
NumericVector ths_vp02(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp02_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp02(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp02(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp02_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp10
NumericVector ths_vp10(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp10_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp10(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp10(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp10_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp11
NumericVector ths_vp11(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp11_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp11(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp11(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp11_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp12
NumericVector ths_vp12(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp12_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp12(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp12(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp12_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp20
NumericVector ths_vp20(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp20_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp20(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp20(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp20_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp21
NumericVector ths_vp21(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp21_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp21(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp21(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp21_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_vp22
NumericVector ths_vp22(NumericVector vs, double t, double lambda0, double lambda1, double lambda2, double p);
static SEXP _smam_ths_vp22_try(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_vp22(vs, t, lambda0, lambda1, lambda2, p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_vp22(SEXP vsSEXP, SEXP tSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_vp22_try(vsSEXP, tSEXP, lambda0SEXP, lambda1SEXP, lambda2SEXP, pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h00
NumericVector ths_h00(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h00_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h00(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h00(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h00_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h01
NumericVector ths_h01(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h01_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h01(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h01(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h01_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h02
NumericVector ths_h02(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h02_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h02(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h02(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h02_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h10
NumericVector ths_h10(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h10_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h10(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h10(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h10_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h11
NumericVector ths_h11(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h11_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h11(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h11(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h11_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h12
NumericVector ths_h12(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h12_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h12(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h12(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h12_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h20
NumericVector ths_h20(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h20_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h20(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h20(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h20_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h21
NumericVector ths_h21(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h21_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h21(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h21(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h21_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h22
NumericVector ths_h22(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl);
static SEXP _smam_ths_h22_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h22(x, t, theta, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h22(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h22_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h00_paral
NumericVector ths_h00_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h00_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h00_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h00_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h00_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h01_paral
NumericVector ths_h01_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h01_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h01_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h01_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h01_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h02_paral
NumericVector ths_h02_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h02_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h02_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h02_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h02_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h10_paral
NumericVector ths_h10_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h10_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h10_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h10_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h10_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h11_paral
NumericVector ths_h11_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h11_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h11_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h11_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h11_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h12_paral
NumericVector ths_h12_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h12_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h12_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h12_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h12_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h20_paral
NumericVector ths_h20_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h20_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h20_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h20_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h20_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h21_paral
NumericVector ths_h21_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h21_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h21_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h21_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h21_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ths_h22_paral
NumericVector ths_h22_paral(NumericMatrix x, NumericVector t, NumericVector theta, NumericVector integrControl, int grainSize);
static SEXP _smam_ths_h22_paral_try(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ths_h22_paral(x, t, theta, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_ths_h22_paral(SEXP xSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_ths_h22_paral_try(xSEXP, tSEXP, thetaSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// con_v_m
NumericMatrix con_v_m(NumericVector x);
static SEXP _smam_con_v_m_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(con_v_m(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_con_v_m(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_con_v_m_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// con_n_v
NumericVector con_n_v(double x);
static SEXP _smam_con_n_v_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(con_n_v(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_con_n_v(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_con_n_v_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// nllk_fwd_ths
double nllk_fwd_ths(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl);
static SEXP _smam_nllk_fwd_ths_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    rcpp_result_gen = Rcpp::wrap(nllk_fwd_ths(theta, data, integrControl));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_nllk_fwd_ths(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_nllk_fwd_ths_try(thetaSEXP, dataSEXP, integrControlSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// nllk_fwd_ths_parallel
double nllk_fwd_ths_parallel(NumericVector& theta, NumericMatrix& data, NumericVector& integrControl, int grainSize);
static SEXP _smam_nllk_fwd_ths_parallel_try(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type integrControl(integrControlSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(nllk_fwd_ths_parallel(theta, data, integrControl, grainSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _smam_nllk_fwd_ths_parallel(SEXP thetaSEXP, SEXP dataSEXP, SEXP integrControlSEXP, SEXP grainSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_smam_nllk_fwd_ths_parallel_try(thetaSEXP, dataSEXP, integrControlSEXP, grainSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _smam_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*vp11)(NumericVector,double,double,double)");
        signatures.insert("NumericVector(*vp10)(NumericVector,double,double,double)");
        signatures.insert("NumericVector(*vp00)(NumericVector,double,double,double)");
        signatures.insert("NumericVector(*vp01)(NumericVector,double,double,double)");
        signatures.insert("NumericVector(*h11)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*h10)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*h00)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*h01)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("double(*ncllk_m1_inc)(NumericVector&,NumericMatrix&,NumericVector&,LogicalVector&)");
        signatures.insert("double(*nllk_inc)(NumericVector&,NumericMatrix&,NumericVector&,LogicalVector&)");
        signatures.insert("NumericMatrix(*fwd_bwd_mr)(NumericVector&,NumericMatrix&,NumericVector&)");
        signatures.insert("NumericMatrix(*viterbi_mr)(NumericVector&,NumericMatrix&,NumericVector&)");
        signatures.insert("NumericMatrix(*partial_viterbi_mr)(NumericVector&,NumericMatrix&,NumericVector&,int&,int&)");
        signatures.insert("NumericMatrix(*fwd_bwd_ths)(NumericVector&,NumericMatrix&,NumericVector&)");
        signatures.insert("NumericMatrix(*viterbi_ths)(NumericVector&,NumericMatrix&,NumericVector&)");
        signatures.insert("NumericMatrix(*partial_viterbi_ths)(NumericVector&,NumericMatrix&,NumericVector&,int&,int&)");
        signatures.insert("NumericVector(*ths_vp00)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp01)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp02)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp10)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp11)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp12)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp20)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp21)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_vp22)(NumericVector,double,double,double,double,double)");
        signatures.insert("NumericVector(*ths_h00)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h01)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h02)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h10)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h11)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h12)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h20)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h21)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h22)(NumericMatrix,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*ths_h00_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h01_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h02_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h10_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h11_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h12_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h20_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h21_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericVector(*ths_h22_paral)(NumericMatrix,NumericVector,NumericVector,NumericVector,int)");
        signatures.insert("NumericMatrix(*con_v_m)(NumericVector)");
        signatures.insert("NumericVector(*con_n_v)(double)");
        signatures.insert("double(*nllk_fwd_ths)(NumericVector&,NumericMatrix&,NumericVector&)");
        signatures.insert("double(*nllk_fwd_ths_parallel)(NumericVector&,NumericMatrix&,NumericVector&,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _smam_RcppExport_registerCCallable() { 
    R_RegisterCCallable("smam", "_smam_vp11", (DL_FUNC)_smam_vp11_try);
    R_RegisterCCallable("smam", "_smam_vp10", (DL_FUNC)_smam_vp10_try);
    R_RegisterCCallable("smam", "_smam_vp00", (DL_FUNC)_smam_vp00_try);
    R_RegisterCCallable("smam", "_smam_vp01", (DL_FUNC)_smam_vp01_try);
    R_RegisterCCallable("smam", "_smam_h11", (DL_FUNC)_smam_h11_try);
    R_RegisterCCallable("smam", "_smam_h10", (DL_FUNC)_smam_h10_try);
    R_RegisterCCallable("smam", "_smam_h00", (DL_FUNC)_smam_h00_try);
    R_RegisterCCallable("smam", "_smam_h01", (DL_FUNC)_smam_h01_try);
    R_RegisterCCallable("smam", "_smam_ncllk_m1_inc", (DL_FUNC)_smam_ncllk_m1_inc_try);
    R_RegisterCCallable("smam", "_smam_nllk_inc", (DL_FUNC)_smam_nllk_inc_try);
    R_RegisterCCallable("smam", "_smam_fwd_bwd_mr", (DL_FUNC)_smam_fwd_bwd_mr_try);
    R_RegisterCCallable("smam", "_smam_viterbi_mr", (DL_FUNC)_smam_viterbi_mr_try);
    R_RegisterCCallable("smam", "_smam_partial_viterbi_mr", (DL_FUNC)_smam_partial_viterbi_mr_try);
    R_RegisterCCallable("smam", "_smam_fwd_bwd_ths", (DL_FUNC)_smam_fwd_bwd_ths_try);
    R_RegisterCCallable("smam", "_smam_viterbi_ths", (DL_FUNC)_smam_viterbi_ths_try);
    R_RegisterCCallable("smam", "_smam_partial_viterbi_ths", (DL_FUNC)_smam_partial_viterbi_ths_try);
    R_RegisterCCallable("smam", "_smam_ths_vp00", (DL_FUNC)_smam_ths_vp00_try);
    R_RegisterCCallable("smam", "_smam_ths_vp01", (DL_FUNC)_smam_ths_vp01_try);
    R_RegisterCCallable("smam", "_smam_ths_vp02", (DL_FUNC)_smam_ths_vp02_try);
    R_RegisterCCallable("smam", "_smam_ths_vp10", (DL_FUNC)_smam_ths_vp10_try);
    R_RegisterCCallable("smam", "_smam_ths_vp11", (DL_FUNC)_smam_ths_vp11_try);
    R_RegisterCCallable("smam", "_smam_ths_vp12", (DL_FUNC)_smam_ths_vp12_try);
    R_RegisterCCallable("smam", "_smam_ths_vp20", (DL_FUNC)_smam_ths_vp20_try);
    R_RegisterCCallable("smam", "_smam_ths_vp21", (DL_FUNC)_smam_ths_vp21_try);
    R_RegisterCCallable("smam", "_smam_ths_vp22", (DL_FUNC)_smam_ths_vp22_try);
    R_RegisterCCallable("smam", "_smam_ths_h00", (DL_FUNC)_smam_ths_h00_try);
    R_RegisterCCallable("smam", "_smam_ths_h01", (DL_FUNC)_smam_ths_h01_try);
    R_RegisterCCallable("smam", "_smam_ths_h02", (DL_FUNC)_smam_ths_h02_try);
    R_RegisterCCallable("smam", "_smam_ths_h10", (DL_FUNC)_smam_ths_h10_try);
    R_RegisterCCallable("smam", "_smam_ths_h11", (DL_FUNC)_smam_ths_h11_try);
    R_RegisterCCallable("smam", "_smam_ths_h12", (DL_FUNC)_smam_ths_h12_try);
    R_RegisterCCallable("smam", "_smam_ths_h20", (DL_FUNC)_smam_ths_h20_try);
    R_RegisterCCallable("smam", "_smam_ths_h21", (DL_FUNC)_smam_ths_h21_try);
    R_RegisterCCallable("smam", "_smam_ths_h22", (DL_FUNC)_smam_ths_h22_try);
    R_RegisterCCallable("smam", "_smam_ths_h00_paral", (DL_FUNC)_smam_ths_h00_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h01_paral", (DL_FUNC)_smam_ths_h01_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h02_paral", (DL_FUNC)_smam_ths_h02_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h10_paral", (DL_FUNC)_smam_ths_h10_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h11_paral", (DL_FUNC)_smam_ths_h11_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h12_paral", (DL_FUNC)_smam_ths_h12_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h20_paral", (DL_FUNC)_smam_ths_h20_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h21_paral", (DL_FUNC)_smam_ths_h21_paral_try);
    R_RegisterCCallable("smam", "_smam_ths_h22_paral", (DL_FUNC)_smam_ths_h22_paral_try);
    R_RegisterCCallable("smam", "_smam_con_v_m", (DL_FUNC)_smam_con_v_m_try);
    R_RegisterCCallable("smam", "_smam_con_n_v", (DL_FUNC)_smam_con_n_v_try);
    R_RegisterCCallable("smam", "_smam_nllk_fwd_ths", (DL_FUNC)_smam_nllk_fwd_ths_try);
    R_RegisterCCallable("smam", "_smam_nllk_fwd_ths_parallel", (DL_FUNC)_smam_nllk_fwd_ths_parallel_try);
    R_RegisterCCallable("smam", "_smam_RcppExport_validate", (DL_FUNC)_smam_RcppExport_validate);
    return R_NilValue;
}

RcppExport void pmm(void *, void *, void *, void *, void *, void *);
RcppExport void pmr(void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_smam_vp11", (DL_FUNC) &_smam_vp11, 4},
    {"_smam_vp10", (DL_FUNC) &_smam_vp10, 4},
    {"_smam_vp00", (DL_FUNC) &_smam_vp00, 4},
    {"_smam_vp01", (DL_FUNC) &_smam_vp01, 4},
    {"_smam_h11", (DL_FUNC) &_smam_h11, 4},
    {"_smam_h10", (DL_FUNC) &_smam_h10, 4},
    {"_smam_h00", (DL_FUNC) &_smam_h00, 4},
    {"_smam_h01", (DL_FUNC) &_smam_h01, 4},
    {"_smam_ncllk_m1_inc", (DL_FUNC) &_smam_ncllk_m1_inc, 4},
    {"_smam_nllk_inc", (DL_FUNC) &_smam_nllk_inc, 4},
    {"_smam_fwd_bwd_mr", (DL_FUNC) &_smam_fwd_bwd_mr, 3},
    {"_smam_viterbi_mr", (DL_FUNC) &_smam_viterbi_mr, 3},
    {"_smam_partial_viterbi_mr", (DL_FUNC) &_smam_partial_viterbi_mr, 5},
    {"_smam_fwd_bwd_ths", (DL_FUNC) &_smam_fwd_bwd_ths, 3},
    {"_smam_viterbi_ths", (DL_FUNC) &_smam_viterbi_ths, 3},
    {"_smam_partial_viterbi_ths", (DL_FUNC) &_smam_partial_viterbi_ths, 5},
    {"_smam_ths_vp00", (DL_FUNC) &_smam_ths_vp00, 6},
    {"_smam_ths_vp01", (DL_FUNC) &_smam_ths_vp01, 6},
    {"_smam_ths_vp02", (DL_FUNC) &_smam_ths_vp02, 6},
    {"_smam_ths_vp10", (DL_FUNC) &_smam_ths_vp10, 6},
    {"_smam_ths_vp11", (DL_FUNC) &_smam_ths_vp11, 6},
    {"_smam_ths_vp12", (DL_FUNC) &_smam_ths_vp12, 6},
    {"_smam_ths_vp20", (DL_FUNC) &_smam_ths_vp20, 6},
    {"_smam_ths_vp21", (DL_FUNC) &_smam_ths_vp21, 6},
    {"_smam_ths_vp22", (DL_FUNC) &_smam_ths_vp22, 6},
    {"_smam_ths_h00", (DL_FUNC) &_smam_ths_h00, 4},
    {"_smam_ths_h01", (DL_FUNC) &_smam_ths_h01, 4},
    {"_smam_ths_h02", (DL_FUNC) &_smam_ths_h02, 4},
    {"_smam_ths_h10", (DL_FUNC) &_smam_ths_h10, 4},
    {"_smam_ths_h11", (DL_FUNC) &_smam_ths_h11, 4},
    {"_smam_ths_h12", (DL_FUNC) &_smam_ths_h12, 4},
    {"_smam_ths_h20", (DL_FUNC) &_smam_ths_h20, 4},
    {"_smam_ths_h21", (DL_FUNC) &_smam_ths_h21, 4},
    {"_smam_ths_h22", (DL_FUNC) &_smam_ths_h22, 4},
    {"_smam_ths_h00_paral", (DL_FUNC) &_smam_ths_h00_paral, 5},
    {"_smam_ths_h01_paral", (DL_FUNC) &_smam_ths_h01_paral, 5},
    {"_smam_ths_h02_paral", (DL_FUNC) &_smam_ths_h02_paral, 5},
    {"_smam_ths_h10_paral", (DL_FUNC) &_smam_ths_h10_paral, 5},
    {"_smam_ths_h11_paral", (DL_FUNC) &_smam_ths_h11_paral, 5},
    {"_smam_ths_h12_paral", (DL_FUNC) &_smam_ths_h12_paral, 5},
    {"_smam_ths_h20_paral", (DL_FUNC) &_smam_ths_h20_paral, 5},
    {"_smam_ths_h21_paral", (DL_FUNC) &_smam_ths_h21_paral, 5},
    {"_smam_ths_h22_paral", (DL_FUNC) &_smam_ths_h22_paral, 5},
    {"_smam_con_v_m", (DL_FUNC) &_smam_con_v_m, 1},
    {"_smam_con_n_v", (DL_FUNC) &_smam_con_n_v, 1},
    {"_smam_nllk_fwd_ths", (DL_FUNC) &_smam_nllk_fwd_ths, 3},
    {"_smam_nllk_fwd_ths_parallel", (DL_FUNC) &_smam_nllk_fwd_ths_parallel, 4},
    {"_smam_RcppExport_registerCCallable", (DL_FUNC) &_smam_RcppExport_registerCCallable, 0},
    {"pmm", (DL_FUNC) &pmm, 6},
    {"pmr", (DL_FUNC) &pmr, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_smam(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
